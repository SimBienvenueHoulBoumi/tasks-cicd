/**
 * üîß Jenkinsfile pour projet Java Spring Boot
 * ‚ûï Build Maven, Tests, SonarQube, Image Docker
 */

pipeline {

    agent { label 'jenkins-agent' }

    tools {
        jdk 'jdk'       // JDK 17 (d√©fini dans Jenkins Global Tools)
        maven 'maven'   // Maven 3.9
    }

    environment {
        SONAR_TOKEN     = "${env.SONAR_TOKEN}"        // Inject√© via docker-compose
        SONAR_HOST_URL  = "${env.SONAR_HOST_URL}"     // Inject√© via docker-compose
        DOCKER_IMAGE    = "tasks-app:latest"          // üì¶ Nom de l‚Äôimage locale
    }

    stages {

        stage('‚úÖ V√©rification des variables') {
            steps {
                echo "üß™ V√©rif des variables d‚Äôenvironnement..."
                echo "SONAR_TOKEN d√©fini ? ${env.SONAR_TOKEN != null}"
                echo "SONAR_HOST_URL     = ${env.SONAR_HOST_URL}"
                echo "DOCKER_IMAGE       = ${env.DOCKER_IMAGE}"
            }
        }

        stage('üì• Checkout Git') {
            steps {
                git url: 'https://github.com/SimBienvenueHoulBoumi/tasks-cicd.git', branch: 'main'
            }
        }

        stage('üîß G√©n√©rer Maven Wrapper') {
            steps {
                sh '''
                    if [ ! -f "./mvnw" ]; then
                        echo "‚û° Maven Wrapper manquant. G√©n√©ration..."
                        mvn -N io.takari:maven:wrapper
                    else
                        echo "‚úÖ Maven Wrapper d√©j√† pr√©sent."
                    fi
                '''
            }
        }

        stage('üî® Compilation') {
            steps {
                sh './mvnw clean install -DskipTests'
            }
        }

        stage('üß™ Tests') {
            steps {
                sh './mvnw test'
                junit 'target/surefire-reports/*.xml'
            }
        }

        stage('üìä Analyse SonarQube') {
            steps {
                sh """
                    ./mvnw sonar:sonar \
                        -Dsonar.projectKey=tasks \
                        -Dsonar.host.url=${SONAR_HOST_URL} \
                        -Dsonar.login=${SONAR_TOKEN}
                """
            }
        }

        stage('üê≥ Build Docker') {
            steps {
                script {
                    docker.build("${DOCKER_IMAGE}")
                }
            }
        }

        /*
        stage('üì§ Push Docker Image') {
            environment {
                REGISTRY_CREDENTIALS = credentials('docker-hub-creds')
            }
            steps {
                script {
                    docker.withRegistry('https://index.docker.io/v1/', 'REGISTRY_CREDENTIALS') {
                        docker.image("${DOCKER_IMAGE}").push()
                    }
                }
            }
        }
        */
    }

    post {
        success {
            echo "‚úÖ Pipeline termin√© avec succ√®s"
        }
        failure {
            echo "‚ùå Pipeline √©chou√©"
        }
        always {
            cleanWs()
        }
    }
}
