/**
 * üîß Jenkinsfile pour projet Java Spring Boot
 * ‚ûï Build Maven, Tests, SonarQube, Image Docker
 */

pipeline {

    agent { label 'jenkins-agent' }

    tools {
        jdk 'jdk'       // JDK 17 (d√©fini dans Jenkins Global Tools)
        maven 'maven'   // Maven 3.9
    }

    environment {
        DOCKER_IMAGE = 'simbienvenuehoulboumi/tasks-cicd:latest' // Nom de l'image Docker
        SONAR_HOST_URL = 'http://localhost:9000/'
        SONAR_TOKEN    = credentials('SONAR_TOKEN') // Token SonarQube stock√© dans Jenkins Credentials
        AGENT_CREDENTIALS = 'JENKINS-AGENT-CREDENTIALS' // Credentials pour l'agent Jenkins
    }

    stages {

        stage('‚úÖ V√©rification des variables') {
            steps {
                echo "üß™ V√©rif des variables d‚Äôenvironnement..."
                echo "DOCKER_IMAGE       = ${env.DOCKER_IMAGE}"
            }
        }

        stage('üì• Checkout Git') {
            steps {
                git credentialsId: "${AGENT_CREDENTIALS}",
                    url: 'https://github.com/SimBienvenueHoulBoumi/tasks-cicd.git',
                    branch: 'main'
            }
        }

        stage('üîß G√©n√©rer Maven Wrapper') {
            steps {
                sh '''
                    if [ ! -f "./mvnw" ]; then
                        echo "‚û° Maven Wrapper manquant. G√©n√©ration..."
                        mvn -N io.takari:maven:wrapper
                    else
                        echo "‚úÖ Maven Wrapper d√©j√† pr√©sent."
                    fi
                '''
            }
        }

        stage('üî® Compilation') {
            steps {
                sh './mvnw clean install -DskipTests'
            }
        }

        stage('üß™ Tests') {
            steps {
                sh 'mvn verify'
                junit 'target/surefire-reports/*.xml'
            }
        }

        stage('üìä Analyse SonarQube') {
            steps {
                sh """
                    ./mvnw sonar:sonar \
                        -Dsonar.projectKey=tasks \
                        -Dsonar.host.url=${SONAR_HOST_URL} \
                        -Dsonar.login=${SONAR_TOKEN}
                """
            }
        }

        /**
         * üê≥ Build Docker
         * Construit l‚Äôimage Docker avec le Dockerfile pr√©sent dans le repo
         */
        stage('üê≥ Build Docker') {
            steps {
                sh """
                    docker build -t ${DOCKER_IMAGE} .
                """
            }
        }

        stage('üõ°Ô∏è Scan s√©curit√© Trivy (Image)') {
            steps {
                sh '''
                    mkdir -p trivy-reports
                    docker run --rm \
                        -v /var/run/docker.sock:/var/run/docker.sock \
                        -v $PWD/trivy-reports:/root/reports \
                        aquasec/trivy:latest image \
                        --exit-code 1 \
                        --severity CRITICAL,HIGH \
                        --format json \
                        --output /root/reports/trivy-image-report.json \
                        ${DOCKER_IMAGE}
                '''
            }
            post {
                always {
                    archiveArtifacts artifacts: 'trivy-reports/trivy-image-report.json', allowEmptyArchive: true
                }
                failure {
                    echo '‚ùå Scan Trivy (image) a trouv√© des vuln√©rabilit√©s critiques ou hautes.'
                }
            }
        }

        stage('üß¨ Scan s√©curit√© Trivy (Code Source)') {
            steps {
                sh '''
                    docker run --rm \
                        -v $PWD:/project \
                        -v $PWD/trivy-reports:/root/reports \
                        aquasec/trivy:latest fs /project \
                        --exit-code 0 \
                        --format json \
                        --output /root/reports/trivy-fs-report.json
                '''
            }
            post {
                always {
                    archiveArtifacts artifacts: 'trivy-reports/trivy-fs-report.json', allowEmptyArchive: true
                }
            }
        }

    }

    post {
        success {
            echo "‚úÖ Pipeline termin√© avec succ√®s"
        }
        failure {
            echo "‚ùå Pipeline √©chou√©"
        }
        always {
            cleanWs()
        }
    }
}
